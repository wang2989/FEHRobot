#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>
#include <FEHRPS.h>
#include <FEHSD.h>

//Declarations for encoders & motors
DigitalEncoder right_encoder(FEHIO::P0_7);
DigitalEncoder left_encoder(FEHIO::P0_6);
FEHMotor right_motor(FEHMotor::Motor1, 9.0);
FEHMotor left_motor(FEHMotor::Motor0, 9.0);

void move_forward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(percent);

    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while(((left_encoder.Counts() + right_encoder.Counts()) / 2.) < counts)
    {

        LCD.Write("R: ");
        LCD.Write(right_encoder.Counts());
        LCD.Write("\tL: ");
        LCD.WriteLine(left_encoder.Counts());

    }

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void turn_left(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(-percent);

    //While the average of the left and right encoder are less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void check_x_minus(float x_coordinate) //using RPS while robot is in the -x direction
{
    //check if receiving proper RPS coordinates and whether the robot is within an acceptable range
    while(RPS.X() >= 0 && (RPS.X() < x_coordinate - 1 || RPS.X() > x_coordinate + 1))
    {
        if(RPS.X() > x_coordinate)
        {
            //pulse the motors for a short duration in the correct direction

            //<ADD CODE HERE>
            move_forward(-20, 150);
        }
        else if(RPS.X() < x_coordinate)
        {
            //pulse the motors for a short duration in the correct direction

            //<ADD CODE HERE>
            move_forward(20, 150);
        }
    }
}

void check_y_minus(float y_coordinate) //using RPS while robot is in the -y direction
{
    //check if receiving proper RPS coordinates and whether the robot is within an acceptable range
    while(RPS.Y() >= 0 && (RPS.Y() < y_coordinate - 1 || RPS.Y() > y_coordinate + 1))
    {
        if(RPS.Y() > y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction

            //<ADD CODE HERE>
            move_forward(-20, 150);
        }
        else if(RPS.Y() < y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction

            //<ADD CODE HERE>
            move_forward(20, 150);
        }
    }
}

void check_y_plus(float y_coordinate) //using RPS while robot is in the +y direction
{
    //check if receiving proper RPS coordinates and whether the robot is within an acceptable range
    while(RPS.Y() >= 0 && (RPS.Y() < y_coordinate - 1 || RPS.Y() > y_coordinate + 1))
    {
        if(RPS.Y() > y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction

            //<ADD CODE HERE>
            LCD.WriteLine("Not there yet");
            move_forward(-20, 150.0);
        }
        else if(RPS.Y() < y_coordinate)
        {
            //pulse the motors for a short duration in the correct direction

            //<ADD CODE HERE>
            LCD.WriteLine("Too Far");
            move_forward(20, 150.0);
        }
    }
}

void check_heading(float heading) //using RPS
{
    //you will need to fill out this one yourself and take into account
    //checking for proper RPS data and the edge conditions
    //(when you want the robot to go to 0 degrees or close to 0 degrees)
    float currentHeading = RPS.Heading();
//MY CODE:
//DOROTHY NIE
//    while (RPS.Heading() >= 0 && RPS.Heading() <= 359.9) {
        if (currentHeading > heading)
        {
            while(currentHeading>heading)
            {
                right_motor.SetPercent(15);
                left_motor.SetPercent(0);
                currentHeading=RPS.Heading();
            }

        }
        if (currentHeading < RPS.Heading())
        {
            while(currentHeading<heading)
            {
                right_motor.SetPercent(0);
                left_motor.SetPercent(15);
                currentHeading=RPS.Heading();
            }
        }
        }

//}

int main(void)
{
    float touch_x,touch_y;
    float A_x, A_y, B_x, B_y, C_x, C_y, D_x, D_y;
    float A_heading, B_heading, C_heading, D_heading;
    int power, B_C_counts, C_D_counts, turn_90_counts;

    RPS.InitializeTouchMenu();

    LCD.WriteLine("RPS & Data Logging Test");
    LCD.WriteLine("Press Screen To Start");
    while(!LCD.Touch(&touch_x,&touch_y));
    while(LCD.Touch(&touch_x,&touch_y));

    //WRITE CODE HERE TO READ SD CARD FOR LOGGED X AND Y DATA POINTS
//DOROTHY"S CODE
    LCD.WriteLine( RPS.X() );
    LCD.WriteLine( RPS.Y() );

    //WRITE CODE HERE TO SET THE HEADING DEGREES, MOTOR POWER, AND COUNTS VALUES
//DOROTHY"S CODE
    A_x=27.199;
    A_y=51.800;
    B_x=27.400;
    B_y=61.800;
    A_heading=90;
    B_heading=180;
    power=20;

    //A --> B
    check_y_plus(B_y);
    check_heading(B_heading);

    //B --> C
    move_forward(power, B_C_counts);
    check_x_minus(C_x);
    turn_left(power, turn_90_counts);
    check_heading(C_heading);

    //C --> D
    move_forward(power, C_D_counts);
    check_y_minus(D_y);
    turn_left(power, turn_90_counts);
    check_heading(D_heading);

    return 0;
}
